// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: clientchannel/service.proto

package clientchannel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Service_ConnectClient, error)
	GetEventsFromStart(ctx context.Context, in *GetEventsFromStartRequest, opts ...grpc.CallOption) (Service_GetEventsFromStartClient, error)
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Service_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], "/clientchannel.Service/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceConnectClient{stream}
	return x, nil
}

type Service_ConnectClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type serviceConnectClient struct {
	grpc.ClientStream
}

func (x *serviceConnectClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceConnectClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetEventsFromStart(ctx context.Context, in *GetEventsFromStartRequest, opts ...grpc.CallOption) (Service_GetEventsFromStartClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], "/clientchannel.Service/GetEventsFromStart", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceGetEventsFromStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_GetEventsFromStartClient interface {
	Recv() (*PublishEventEnvelope, error)
	grpc.ClientStream
}

type serviceGetEventsFromStartClient struct {
	grpc.ClientStream
}

func (x *serviceGetEventsFromStartClient) Recv() (*PublishEventEnvelope, error) {
	m := new(PublishEventEnvelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error) {
	out := new(GetStreamResponse)
	err := c.cc.Invoke(ctx, "/clientchannel.Service/GetStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Connect(Service_ConnectServer) error
	GetEventsFromStart(*GetEventsFromStartRequest, Service_GetEventsFromStartServer) error
	GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Connect(Service_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedServiceServer) GetEventsFromStart(*GetEventsFromStartRequest, Service_GetEventsFromStartServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEventsFromStart not implemented")
}
func (UnimplementedServiceServer) GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Connect(&serviceConnectServer{stream})
}

type Service_ConnectServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type serviceConnectServer struct {
	grpc.ServerStream
}

func (x *serviceConnectServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceConnectServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_GetEventsFromStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsFromStartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).GetEventsFromStart(m, &serviceGetEventsFromStartServer{stream})
}

type Service_GetEventsFromStartServer interface {
	Send(*PublishEventEnvelope) error
	grpc.ServerStream
}

type serviceGetEventsFromStartServer struct {
	grpc.ServerStream
}

func (x *serviceGetEventsFromStartServer) Send(m *PublishEventEnvelope) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientchannel.Service/GetStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientchannel.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStream",
			Handler:    _Service_GetStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Service_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetEventsFromStart",
			Handler:       _Service_GetEventsFromStart_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clientchannel/service.proto",
}
