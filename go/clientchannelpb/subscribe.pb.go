// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: clientchannel/subscribe.proto

package clientchannelpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*SubscribeRequest_Init
	//	*SubscribeRequest_Subscribe
	//	*SubscribeRequest_EventReceived_
	//	*SubscribeRequest_EventNotReceived_
	//	*SubscribeRequest_EventHandled_
	//	*SubscribeRequest_EventNotHandled_
	Payload isSubscribeRequest_Payload `protobuf_oneof:"payload"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{0}
}

func (m *SubscribeRequest) GetPayload() isSubscribeRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SubscribeRequest) GetInit() *SubscribeRequest_InitAction {
	if x, ok := x.GetPayload().(*SubscribeRequest_Init); ok {
		return x.Init
	}
	return nil
}

func (x *SubscribeRequest) GetSubscribe() *SubscribeRequest_SubscribeAction {
	if x, ok := x.GetPayload().(*SubscribeRequest_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *SubscribeRequest) GetEventReceived() *SubscribeRequest_EventReceived {
	if x, ok := x.GetPayload().(*SubscribeRequest_EventReceived_); ok {
		return x.EventReceived
	}
	return nil
}

func (x *SubscribeRequest) GetEventNotReceived() *SubscribeRequest_EventNotReceived {
	if x, ok := x.GetPayload().(*SubscribeRequest_EventNotReceived_); ok {
		return x.EventNotReceived
	}
	return nil
}

func (x *SubscribeRequest) GetEventHandled() *SubscribeRequest_EventHandled {
	if x, ok := x.GetPayload().(*SubscribeRequest_EventHandled_); ok {
		return x.EventHandled
	}
	return nil
}

func (x *SubscribeRequest) GetEventNotHandled() *SubscribeRequest_EventNotHandled {
	if x, ok := x.GetPayload().(*SubscribeRequest_EventNotHandled_); ok {
		return x.EventNotHandled
	}
	return nil
}

type isSubscribeRequest_Payload interface {
	isSubscribeRequest_Payload()
}

type SubscribeRequest_Init struct {
	Init *SubscribeRequest_InitAction `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type SubscribeRequest_Subscribe struct {
	Subscribe *SubscribeRequest_SubscribeAction `protobuf:"bytes,2,opt,name=subscribe,proto3,oneof"`
}

type SubscribeRequest_EventReceived_ struct {
	EventReceived *SubscribeRequest_EventReceived `protobuf:"bytes,3,opt,name=event_received,json=eventReceived,proto3,oneof"`
}

type SubscribeRequest_EventNotReceived_ struct {
	EventNotReceived *SubscribeRequest_EventNotReceived `protobuf:"bytes,4,opt,name=event_not_received,json=eventNotReceived,proto3,oneof"`
}

type SubscribeRequest_EventHandled_ struct {
	EventHandled *SubscribeRequest_EventHandled `protobuf:"bytes,5,opt,name=event_handled,json=eventHandled,proto3,oneof"`
}

type SubscribeRequest_EventNotHandled_ struct {
	EventNotHandled *SubscribeRequest_EventNotHandled `protobuf:"bytes,6,opt,name=event_not_handled,json=eventNotHandled,proto3,oneof"`
}

func (*SubscribeRequest_Init) isSubscribeRequest_Payload() {}

func (*SubscribeRequest_Subscribe) isSubscribeRequest_Payload() {}

func (*SubscribeRequest_EventReceived_) isSubscribeRequest_Payload() {}

func (*SubscribeRequest_EventNotReceived_) isSubscribeRequest_Payload() {}

func (*SubscribeRequest_EventHandled_) isSubscribeRequest_Payload() {}

func (*SubscribeRequest_EventNotHandled_) isSubscribeRequest_Payload() {}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*SubscribeResponse_Event
	//	*SubscribeResponse_InitAck_
	//	*SubscribeResponse_InitNotAck_
	//	*SubscribeResponse_SubscribeAck_
	//	*SubscribeResponse_SubscribeNotAck_
	Data isSubscribeResponse_Data `protobuf_oneof:"data"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{1}
}

func (m *SubscribeResponse) GetData() isSubscribeResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SubscribeResponse) GetEvent() *PublishEventEnvelope {
	if x, ok := x.GetData().(*SubscribeResponse_Event); ok {
		return x.Event
	}
	return nil
}

func (x *SubscribeResponse) GetInitAck() *SubscribeResponse_InitAck {
	if x, ok := x.GetData().(*SubscribeResponse_InitAck_); ok {
		return x.InitAck
	}
	return nil
}

func (x *SubscribeResponse) GetInitNotAck() *SubscribeResponse_InitNotAck {
	if x, ok := x.GetData().(*SubscribeResponse_InitNotAck_); ok {
		return x.InitNotAck
	}
	return nil
}

func (x *SubscribeResponse) GetSubscribeAck() *SubscribeResponse_SubscribeAck {
	if x, ok := x.GetData().(*SubscribeResponse_SubscribeAck_); ok {
		return x.SubscribeAck
	}
	return nil
}

func (x *SubscribeResponse) GetSubscribeNotAck() *SubscribeResponse_SubscribeNotAck {
	if x, ok := x.GetData().(*SubscribeResponse_SubscribeNotAck_); ok {
		return x.SubscribeNotAck
	}
	return nil
}

type isSubscribeResponse_Data interface {
	isSubscribeResponse_Data()
}

type SubscribeResponse_Event struct {
	Event *PublishEventEnvelope `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

type SubscribeResponse_InitAck_ struct {
	InitAck *SubscribeResponse_InitAck `protobuf:"bytes,2,opt,name=init_ack,json=initAck,proto3,oneof"`
}

type SubscribeResponse_InitNotAck_ struct {
	InitNotAck *SubscribeResponse_InitNotAck `protobuf:"bytes,3,opt,name=init_not_ack,json=initNotAck,proto3,oneof"`
}

type SubscribeResponse_SubscribeAck_ struct {
	SubscribeAck *SubscribeResponse_SubscribeAck `protobuf:"bytes,4,opt,name=subscribe_ack,json=subscribeAck,proto3,oneof"`
}

type SubscribeResponse_SubscribeNotAck_ struct {
	SubscribeNotAck *SubscribeResponse_SubscribeNotAck `protobuf:"bytes,5,opt,name=subscribe_not_ack,json=subscribeNotAck,proto3,oneof"`
}

func (*SubscribeResponse_Event) isSubscribeResponse_Data() {}

func (*SubscribeResponse_InitAck_) isSubscribeResponse_Data() {}

func (*SubscribeResponse_InitNotAck_) isSubscribeResponse_Data() {}

func (*SubscribeResponse_SubscribeAck_) isSubscribeResponse_Data() {}

func (*SubscribeResponse_SubscribeNotAck_) isSubscribeResponse_Data() {}

type SubscribeRequest_InitAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	SubscriberId string `protobuf:"bytes,2,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
}

func (x *SubscribeRequest_InitAction) Reset() {
	*x = SubscribeRequest_InitAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest_InitAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest_InitAction) ProtoMessage() {}

func (x *SubscribeRequest_InitAction) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest_InitAction.ProtoReflect.Descriptor instead.
func (*SubscribeRequest_InitAction) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SubscribeRequest_InitAction) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SubscribeRequest_InitAction) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

type SubscribeRequest_SubscribeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludedTopics []string `protobuf:"bytes,1,rep,name=included_topics,json=includedTopics,proto3" json:"included_topics,omitempty"`
	ExcludedTopics []string `protobuf:"bytes,2,rep,name=excluded_topics,json=excludedTopics,proto3" json:"excluded_topics,omitempty"`
}

func (x *SubscribeRequest_SubscribeAction) Reset() {
	*x = SubscribeRequest_SubscribeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest_SubscribeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest_SubscribeAction) ProtoMessage() {}

func (x *SubscribeRequest_SubscribeAction) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest_SubscribeAction.ProtoReflect.Descriptor instead.
func (*SubscribeRequest_SubscribeAction) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SubscribeRequest_SubscribeAction) GetIncludedTopics() []string {
	if x != nil {
		return x.IncludedTopics
	}
	return nil
}

func (x *SubscribeRequest_SubscribeAction) GetExcludedTopics() []string {
	if x != nil {
		return x.ExcludedTopics
	}
	return nil
}

type SubscribeRequest_EventReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Topic    string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	EventId  string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *SubscribeRequest_EventReceived) Reset() {
	*x = SubscribeRequest_EventReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest_EventReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest_EventReceived) ProtoMessage() {}

func (x *SubscribeRequest_EventReceived) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest_EventReceived.ProtoReflect.Descriptor instead.
func (*SubscribeRequest_EventReceived) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SubscribeRequest_EventReceived) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SubscribeRequest_EventReceived) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SubscribeRequest_EventReceived) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type SubscribeRequest_EventNotReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Topic    string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	EventId  string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Reason   string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SubscribeRequest_EventNotReceived) Reset() {
	*x = SubscribeRequest_EventNotReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest_EventNotReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest_EventNotReceived) ProtoMessage() {}

func (x *SubscribeRequest_EventNotReceived) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest_EventNotReceived.ProtoReflect.Descriptor instead.
func (*SubscribeRequest_EventNotReceived) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SubscribeRequest_EventNotReceived) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SubscribeRequest_EventNotReceived) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SubscribeRequest_EventNotReceived) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *SubscribeRequest_EventNotReceived) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type SubscribeRequest_EventHandled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Topic    string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	EventId  string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *SubscribeRequest_EventHandled) Reset() {
	*x = SubscribeRequest_EventHandled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest_EventHandled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest_EventHandled) ProtoMessage() {}

func (x *SubscribeRequest_EventHandled) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest_EventHandled.ProtoReflect.Descriptor instead.
func (*SubscribeRequest_EventHandled) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{0, 4}
}

func (x *SubscribeRequest_EventHandled) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SubscribeRequest_EventHandled) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SubscribeRequest_EventHandled) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type SubscribeRequest_EventNotHandled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Topic    string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	EventId  string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Reason   string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SubscribeRequest_EventNotHandled) Reset() {
	*x = SubscribeRequest_EventNotHandled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest_EventNotHandled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest_EventNotHandled) ProtoMessage() {}

func (x *SubscribeRequest_EventNotHandled) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest_EventNotHandled.ProtoReflect.Descriptor instead.
func (*SubscribeRequest_EventNotHandled) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{0, 5}
}

func (x *SubscribeRequest_EventNotHandled) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SubscribeRequest_EventNotHandled) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SubscribeRequest_EventNotHandled) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *SubscribeRequest_EventNotHandled) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type SubscribeResponse_InitAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeResponse_InitAck) Reset() {
	*x = SubscribeResponse_InitAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse_InitAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse_InitAck) ProtoMessage() {}

func (x *SubscribeResponse_InitAck) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse_InitAck.ProtoReflect.Descriptor instead.
func (*SubscribeResponse_InitAck) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{1, 0}
}

type SubscribeResponse_InitNotAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SubscribeResponse_InitNotAck) Reset() {
	*x = SubscribeResponse_InitNotAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse_InitNotAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse_InitNotAck) ProtoMessage() {}

func (x *SubscribeResponse_InitNotAck) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse_InitNotAck.ProtoReflect.Descriptor instead.
func (*SubscribeResponse_InitNotAck) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SubscribeResponse_InitNotAck) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type SubscribeResponse_SubscribeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeResponse_SubscribeAck) Reset() {
	*x = SubscribeResponse_SubscribeAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse_SubscribeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse_SubscribeAck) ProtoMessage() {}

func (x *SubscribeResponse_SubscribeAck) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse_SubscribeAck.ProtoReflect.Descriptor instead.
func (*SubscribeResponse_SubscribeAck) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{1, 2}
}

type SubscribeResponse_SubscribeNotAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SubscribeResponse_SubscribeNotAck) Reset() {
	*x = SubscribeResponse_SubscribeNotAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientchannel_subscribe_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse_SubscribeNotAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse_SubscribeNotAck) ProtoMessage() {}

func (x *SubscribeResponse_SubscribeNotAck) ProtoReflect() protoreflect.Message {
	mi := &file_clientchannel_subscribe_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse_SubscribeNotAck.ProtoReflect.Descriptor instead.
func (*SubscribeResponse_SubscribeNotAck) Descriptor() ([]byte, []int) {
	return file_clientchannel_subscribe_proto_rawDescGZIP(), []int{1, 3}
}

func (x *SubscribeResponse_SubscribeNotAck) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_clientchannel_subscribe_proto protoreflect.FileDescriptor

var file_clientchannel_subscribe_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x19,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x09, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x12, 0x4f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x56, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x12, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x12, 0x5d, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x1a,
	0x4c, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x63, 0x0a,
	0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x1a, 0x5d, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x1a, 0x78, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x5c, 0x0a, 0x0c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x77, 0x0a, 0x0f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x84, 0x04,
	0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x0c, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x6e, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x6b,
	0x12, 0x5e, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x6b,
	0x1a, 0x09, 0x0a, 0x07, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x6b, 0x1a, 0x24, 0x0a, 0x0a, 0x49,
	0x6e, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x1a, 0x0e, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63,
	0x6b, 0x1a, 0x29, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x6f,
	0x74, 0x41, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clientchannel_subscribe_proto_rawDescOnce sync.Once
	file_clientchannel_subscribe_proto_rawDescData = file_clientchannel_subscribe_proto_rawDesc
)

func file_clientchannel_subscribe_proto_rawDescGZIP() []byte {
	file_clientchannel_subscribe_proto_rawDescOnce.Do(func() {
		file_clientchannel_subscribe_proto_rawDescData = protoimpl.X.CompressGZIP(file_clientchannel_subscribe_proto_rawDescData)
	})
	return file_clientchannel_subscribe_proto_rawDescData
}

var file_clientchannel_subscribe_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_clientchannel_subscribe_proto_goTypes = []interface{}{
	(*SubscribeRequest)(nil),                  // 0: clientchannel.SubscribeRequest
	(*SubscribeResponse)(nil),                 // 1: clientchannel.SubscribeResponse
	(*SubscribeRequest_InitAction)(nil),       // 2: clientchannel.SubscribeRequest.InitAction
	(*SubscribeRequest_SubscribeAction)(nil),  // 3: clientchannel.SubscribeRequest.SubscribeAction
	(*SubscribeRequest_EventReceived)(nil),    // 4: clientchannel.SubscribeRequest.EventReceived
	(*SubscribeRequest_EventNotReceived)(nil), // 5: clientchannel.SubscribeRequest.EventNotReceived
	(*SubscribeRequest_EventHandled)(nil),     // 6: clientchannel.SubscribeRequest.EventHandled
	(*SubscribeRequest_EventNotHandled)(nil),  // 7: clientchannel.SubscribeRequest.EventNotHandled
	(*SubscribeResponse_InitAck)(nil),         // 8: clientchannel.SubscribeResponse.InitAck
	(*SubscribeResponse_InitNotAck)(nil),      // 9: clientchannel.SubscribeResponse.InitNotAck
	(*SubscribeResponse_SubscribeAck)(nil),    // 10: clientchannel.SubscribeResponse.SubscribeAck
	(*SubscribeResponse_SubscribeNotAck)(nil), // 11: clientchannel.SubscribeResponse.SubscribeNotAck
	(*PublishEventEnvelope)(nil),              // 12: PublishEventEnvelope
}
var file_clientchannel_subscribe_proto_depIdxs = []int32{
	2,  // 0: clientchannel.SubscribeRequest.init:type_name -> clientchannel.SubscribeRequest.InitAction
	3,  // 1: clientchannel.SubscribeRequest.subscribe:type_name -> clientchannel.SubscribeRequest.SubscribeAction
	4,  // 2: clientchannel.SubscribeRequest.event_received:type_name -> clientchannel.SubscribeRequest.EventReceived
	5,  // 3: clientchannel.SubscribeRequest.event_not_received:type_name -> clientchannel.SubscribeRequest.EventNotReceived
	6,  // 4: clientchannel.SubscribeRequest.event_handled:type_name -> clientchannel.SubscribeRequest.EventHandled
	7,  // 5: clientchannel.SubscribeRequest.event_not_handled:type_name -> clientchannel.SubscribeRequest.EventNotHandled
	12, // 6: clientchannel.SubscribeResponse.event:type_name -> PublishEventEnvelope
	8,  // 7: clientchannel.SubscribeResponse.init_ack:type_name -> clientchannel.SubscribeResponse.InitAck
	9,  // 8: clientchannel.SubscribeResponse.init_not_ack:type_name -> clientchannel.SubscribeResponse.InitNotAck
	10, // 9: clientchannel.SubscribeResponse.subscribe_ack:type_name -> clientchannel.SubscribeResponse.SubscribeAck
	11, // 10: clientchannel.SubscribeResponse.subscribe_not_ack:type_name -> clientchannel.SubscribeResponse.SubscribeNotAck
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_clientchannel_subscribe_proto_init() }
func file_clientchannel_subscribe_proto_init() {
	if File_clientchannel_subscribe_proto != nil {
		return
	}
	file_clientchannel_event_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_clientchannel_subscribe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest_InitAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest_SubscribeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest_EventReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest_EventNotReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest_EventHandled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest_EventNotHandled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse_InitAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse_InitNotAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse_SubscribeAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientchannel_subscribe_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse_SubscribeNotAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_clientchannel_subscribe_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SubscribeRequest_Init)(nil),
		(*SubscribeRequest_Subscribe)(nil),
		(*SubscribeRequest_EventReceived_)(nil),
		(*SubscribeRequest_EventNotReceived_)(nil),
		(*SubscribeRequest_EventHandled_)(nil),
		(*SubscribeRequest_EventNotHandled_)(nil),
	}
	file_clientchannel_subscribe_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SubscribeResponse_Event)(nil),
		(*SubscribeResponse_InitAck_)(nil),
		(*SubscribeResponse_InitNotAck_)(nil),
		(*SubscribeResponse_SubscribeAck_)(nil),
		(*SubscribeResponse_SubscribeNotAck_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clientchannel_subscribe_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_clientchannel_subscribe_proto_goTypes,
		DependencyIndexes: file_clientchannel_subscribe_proto_depIdxs,
		MessageInfos:      file_clientchannel_subscribe_proto_msgTypes,
	}.Build()
	File_clientchannel_subscribe_proto = out.File
	file_clientchannel_subscribe_proto_rawDesc = nil
	file_clientchannel_subscribe_proto_goTypes = nil
	file_clientchannel_subscribe_proto_depIdxs = nil
}
