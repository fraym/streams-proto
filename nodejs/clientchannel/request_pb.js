// source: clientchannel/request.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var clientchannel_event_pb = require('../clientchannel/event_pb.js');
goog.object.extend(proto, clientchannel_event_pb);
goog.exportSymbol('proto.clientchannel.Request', null, global);
goog.exportSymbol('proto.clientchannel.Request.EventAck', null, global);
goog.exportSymbol('proto.clientchannel.Request.EventNotAck', null, global);
goog.exportSymbol('proto.clientchannel.Request.InitAction', null, global);
goog.exportSymbol('proto.clientchannel.Request.InvalidateGdprAction', null, global);
goog.exportSymbol('proto.clientchannel.Request.PayloadCase', null, global);
goog.exportSymbol('proto.clientchannel.Request.PublishAction', null, global);
goog.exportSymbol('proto.clientchannel.Request.SnapshotAction', null, global);
goog.exportSymbol('proto.clientchannel.Request.SubscribeAction', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.clientchannel.Request.oneofGroups_);
};
goog.inherits(proto.clientchannel.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Request.displayName = 'proto.clientchannel.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Request.InitAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Request.InitAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Request.InitAction.displayName = 'proto.clientchannel.Request.InitAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Request.PublishAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clientchannel.Request.PublishAction.repeatedFields_, null);
};
goog.inherits(proto.clientchannel.Request.PublishAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Request.PublishAction.displayName = 'proto.clientchannel.Request.PublishAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Request.SubscribeAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clientchannel.Request.SubscribeAction.repeatedFields_, null);
};
goog.inherits(proto.clientchannel.Request.SubscribeAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Request.SubscribeAction.displayName = 'proto.clientchannel.Request.SubscribeAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Request.SnapshotAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Request.SnapshotAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Request.SnapshotAction.displayName = 'proto.clientchannel.Request.SnapshotAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Request.InvalidateGdprAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Request.InvalidateGdprAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Request.InvalidateGdprAction.displayName = 'proto.clientchannel.Request.InvalidateGdprAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Request.EventAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Request.EventAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Request.EventAck.displayName = 'proto.clientchannel.Request.EventAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Request.EventNotAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Request.EventNotAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Request.EventNotAck.displayName = 'proto.clientchannel.Request.EventNotAck';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.clientchannel.Request.oneofGroups_ = [[1,2,3,5,6,7,8]];

/**
 * @enum {number}
 */
proto.clientchannel.Request.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  INIT: 1,
  PUBLISH: 2,
  SUBSCRIBE: 3,
  INVALIDATE_GDPR: 5,
  SNAPSHOT: 6,
  EVENT_ACK: 7,
  EVENT_NOT_ACK: 8
};

/**
 * @return {proto.clientchannel.Request.PayloadCase}
 */
proto.clientchannel.Request.prototype.getPayloadCase = function() {
  return /** @type {proto.clientchannel.Request.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.clientchannel.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    init: (f = msg.getInit()) && proto.clientchannel.Request.InitAction.toObject(includeInstance, f),
    publish: (f = msg.getPublish()) && proto.clientchannel.Request.PublishAction.toObject(includeInstance, f),
    subscribe: (f = msg.getSubscribe()) && proto.clientchannel.Request.SubscribeAction.toObject(includeInstance, f),
    invalidateGdpr: (f = msg.getInvalidateGdpr()) && proto.clientchannel.Request.InvalidateGdprAction.toObject(includeInstance, f),
    snapshot: (f = msg.getSnapshot()) && proto.clientchannel.Request.SnapshotAction.toObject(includeInstance, f),
    eventAck: (f = msg.getEventAck()) && proto.clientchannel.Request.EventAck.toObject(includeInstance, f),
    eventNotAck: (f = msg.getEventNotAck()) && proto.clientchannel.Request.EventNotAck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Request}
 */
proto.clientchannel.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Request;
  return proto.clientchannel.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Request}
 */
proto.clientchannel.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientchannel.Request.InitAction;
      reader.readMessage(value,proto.clientchannel.Request.InitAction.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 2:
      var value = new proto.clientchannel.Request.PublishAction;
      reader.readMessage(value,proto.clientchannel.Request.PublishAction.deserializeBinaryFromReader);
      msg.setPublish(value);
      break;
    case 3:
      var value = new proto.clientchannel.Request.SubscribeAction;
      reader.readMessage(value,proto.clientchannel.Request.SubscribeAction.deserializeBinaryFromReader);
      msg.setSubscribe(value);
      break;
    case 5:
      var value = new proto.clientchannel.Request.InvalidateGdprAction;
      reader.readMessage(value,proto.clientchannel.Request.InvalidateGdprAction.deserializeBinaryFromReader);
      msg.setInvalidateGdpr(value);
      break;
    case 6:
      var value = new proto.clientchannel.Request.SnapshotAction;
      reader.readMessage(value,proto.clientchannel.Request.SnapshotAction.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    case 7:
      var value = new proto.clientchannel.Request.EventAck;
      reader.readMessage(value,proto.clientchannel.Request.EventAck.deserializeBinaryFromReader);
      msg.setEventAck(value);
      break;
    case 8:
      var value = new proto.clientchannel.Request.EventNotAck;
      reader.readMessage(value,proto.clientchannel.Request.EventNotAck.deserializeBinaryFromReader);
      msg.setEventNotAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientchannel.Request.InitAction.serializeBinaryToWriter
    );
  }
  f = message.getPublish();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.clientchannel.Request.PublishAction.serializeBinaryToWriter
    );
  }
  f = message.getSubscribe();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.clientchannel.Request.SubscribeAction.serializeBinaryToWriter
    );
  }
  f = message.getInvalidateGdpr();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.clientchannel.Request.InvalidateGdprAction.serializeBinaryToWriter
    );
  }
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.clientchannel.Request.SnapshotAction.serializeBinaryToWriter
    );
  }
  f = message.getEventAck();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.clientchannel.Request.EventAck.serializeBinaryToWriter
    );
  }
  f = message.getEventNotAck();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.clientchannel.Request.EventNotAck.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Request.InitAction.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Request.InitAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Request.InitAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.InitAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subscriberId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Request.InitAction}
 */
proto.clientchannel.Request.InitAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Request.InitAction;
  return proto.clientchannel.Request.InitAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Request.InitAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Request.InitAction}
 */
proto.clientchannel.Request.InitAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriberId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Request.InitAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Request.InitAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Request.InitAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.InitAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubscriberId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string group_id = 1;
 * @return {string}
 */
proto.clientchannel.Request.InitAction.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.InitAction} returns this
 */
proto.clientchannel.Request.InitAction.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string subscriber_id = 2;
 * @return {string}
 */
proto.clientchannel.Request.InitAction.prototype.getSubscriberId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.InitAction} returns this
 */
proto.clientchannel.Request.InitAction.prototype.setSubscriberId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clientchannel.Request.PublishAction.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Request.PublishAction.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Request.PublishAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Request.PublishAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.PublishAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publishActionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    clientchannel_event_pb.EventEnvelope.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Request.PublishAction}
 */
proto.clientchannel.Request.PublishAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Request.PublishAction;
  return proto.clientchannel.Request.PublishAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Request.PublishAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Request.PublishAction}
 */
proto.clientchannel.Request.PublishAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublishActionId(value);
      break;
    case 3:
      var value = new clientchannel_event_pb.EventEnvelope;
      reader.readMessage(value,clientchannel_event_pb.EventEnvelope.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Request.PublishAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Request.PublishAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Request.PublishAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.PublishAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublishActionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      clientchannel_event_pb.EventEnvelope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.clientchannel.Request.PublishAction.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.PublishAction} returns this
 */
proto.clientchannel.Request.PublishAction.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string publish_action_id = 2;
 * @return {string}
 */
proto.clientchannel.Request.PublishAction.prototype.getPublishActionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.PublishAction} returns this
 */
proto.clientchannel.Request.PublishAction.prototype.setPublishActionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated EventEnvelope events = 3;
 * @return {!Array<!proto.EventEnvelope>}
 */
proto.clientchannel.Request.PublishAction.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.EventEnvelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, clientchannel_event_pb.EventEnvelope, 3));
};


/**
 * @param {!Array<!proto.EventEnvelope>} value
 * @return {!proto.clientchannel.Request.PublishAction} returns this
*/
proto.clientchannel.Request.PublishAction.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.EventEnvelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EventEnvelope}
 */
proto.clientchannel.Request.PublishAction.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.EventEnvelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clientchannel.Request.PublishAction} returns this
 */
proto.clientchannel.Request.PublishAction.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clientchannel.Request.SubscribeAction.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Request.SubscribeAction.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Request.SubscribeAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Request.SubscribeAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.SubscribeAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    includedTopicsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    excludedTopicsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Request.SubscribeAction}
 */
proto.clientchannel.Request.SubscribeAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Request.SubscribeAction;
  return proto.clientchannel.Request.SubscribeAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Request.SubscribeAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Request.SubscribeAction}
 */
proto.clientchannel.Request.SubscribeAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIncludedTopics(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addExcludedTopics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Request.SubscribeAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Request.SubscribeAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Request.SubscribeAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.SubscribeAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncludedTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getExcludedTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string included_topics = 1;
 * @return {!Array<string>}
 */
proto.clientchannel.Request.SubscribeAction.prototype.getIncludedTopicsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.clientchannel.Request.SubscribeAction} returns this
 */
proto.clientchannel.Request.SubscribeAction.prototype.setIncludedTopicsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.clientchannel.Request.SubscribeAction} returns this
 */
proto.clientchannel.Request.SubscribeAction.prototype.addIncludedTopics = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clientchannel.Request.SubscribeAction} returns this
 */
proto.clientchannel.Request.SubscribeAction.prototype.clearIncludedTopicsList = function() {
  return this.setIncludedTopicsList([]);
};


/**
 * repeated string excluded_topics = 2;
 * @return {!Array<string>}
 */
proto.clientchannel.Request.SubscribeAction.prototype.getExcludedTopicsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.clientchannel.Request.SubscribeAction} returns this
 */
proto.clientchannel.Request.SubscribeAction.prototype.setExcludedTopicsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.clientchannel.Request.SubscribeAction} returns this
 */
proto.clientchannel.Request.SubscribeAction.prototype.addExcludedTopics = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clientchannel.Request.SubscribeAction} returns this
 */
proto.clientchannel.Request.SubscribeAction.prototype.clearExcludedTopicsList = function() {
  return this.setExcludedTopicsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Request.SnapshotAction.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Request.SnapshotAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Request.SnapshotAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.SnapshotAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toTime: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Request.SnapshotAction}
 */
proto.clientchannel.Request.SnapshotAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Request.SnapshotAction;
  return proto.clientchannel.Request.SnapshotAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Request.SnapshotAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Request.SnapshotAction}
 */
proto.clientchannel.Request.SnapshotAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Request.SnapshotAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Request.SnapshotAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Request.SnapshotAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.SnapshotAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.clientchannel.Request.SnapshotAction.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.SnapshotAction} returns this
 */
proto.clientchannel.Request.SnapshotAction.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to_time = 2;
 * @return {string}
 */
proto.clientchannel.Request.SnapshotAction.prototype.getToTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.SnapshotAction} returns this
 */
proto.clientchannel.Request.SnapshotAction.prototype.setToTime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Request.InvalidateGdprAction.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Request.InvalidateGdprAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Request.InvalidateGdprAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.InvalidateGdprAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    tenantId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gdprId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Request.InvalidateGdprAction}
 */
proto.clientchannel.Request.InvalidateGdprAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Request.InvalidateGdprAction;
  return proto.clientchannel.Request.InvalidateGdprAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Request.InvalidateGdprAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Request.InvalidateGdprAction}
 */
proto.clientchannel.Request.InvalidateGdprAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGdprId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Request.InvalidateGdprAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Request.InvalidateGdprAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Request.InvalidateGdprAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.InvalidateGdprAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGdprId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string tenant_id = 1;
 * @return {string}
 */
proto.clientchannel.Request.InvalidateGdprAction.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.InvalidateGdprAction} returns this
 */
proto.clientchannel.Request.InvalidateGdprAction.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.clientchannel.Request.InvalidateGdprAction.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.InvalidateGdprAction} returns this
 */
proto.clientchannel.Request.InvalidateGdprAction.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string gdpr_id = 3;
 * @return {string}
 */
proto.clientchannel.Request.InvalidateGdprAction.prototype.getGdprId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.InvalidateGdprAction} returns this
 */
proto.clientchannel.Request.InvalidateGdprAction.prototype.setGdprId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Request.EventAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Request.EventAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Request.EventAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.EventAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    tenantId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Request.EventAck}
 */
proto.clientchannel.Request.EventAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Request.EventAck;
  return proto.clientchannel.Request.EventAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Request.EventAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Request.EventAck}
 */
proto.clientchannel.Request.EventAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Request.EventAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Request.EventAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Request.EventAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.EventAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string tenant_id = 1;
 * @return {string}
 */
proto.clientchannel.Request.EventAck.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.EventAck} returns this
 */
proto.clientchannel.Request.EventAck.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.clientchannel.Request.EventAck.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.EventAck} returns this
 */
proto.clientchannel.Request.EventAck.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string event_id = 3;
 * @return {string}
 */
proto.clientchannel.Request.EventAck.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.EventAck} returns this
 */
proto.clientchannel.Request.EventAck.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Request.EventNotAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Request.EventNotAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Request.EventNotAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.EventNotAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    tenantId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Request.EventNotAck}
 */
proto.clientchannel.Request.EventNotAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Request.EventNotAck;
  return proto.clientchannel.Request.EventNotAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Request.EventNotAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Request.EventNotAck}
 */
proto.clientchannel.Request.EventNotAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Request.EventNotAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Request.EventNotAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Request.EventNotAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Request.EventNotAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string tenant_id = 1;
 * @return {string}
 */
proto.clientchannel.Request.EventNotAck.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.EventNotAck} returns this
 */
proto.clientchannel.Request.EventNotAck.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.clientchannel.Request.EventNotAck.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.EventNotAck} returns this
 */
proto.clientchannel.Request.EventNotAck.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string event_id = 3;
 * @return {string}
 */
proto.clientchannel.Request.EventNotAck.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.EventNotAck} returns this
 */
proto.clientchannel.Request.EventNotAck.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string reason = 4;
 * @return {string}
 */
proto.clientchannel.Request.EventNotAck.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Request.EventNotAck} returns this
 */
proto.clientchannel.Request.EventNotAck.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional InitAction init = 1;
 * @return {?proto.clientchannel.Request.InitAction}
 */
proto.clientchannel.Request.prototype.getInit = function() {
  return /** @type{?proto.clientchannel.Request.InitAction} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Request.InitAction, 1));
};


/**
 * @param {?proto.clientchannel.Request.InitAction|undefined} value
 * @return {!proto.clientchannel.Request} returns this
*/
proto.clientchannel.Request.prototype.setInit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.clientchannel.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Request} returns this
 */
proto.clientchannel.Request.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Request.prototype.hasInit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublishAction publish = 2;
 * @return {?proto.clientchannel.Request.PublishAction}
 */
proto.clientchannel.Request.prototype.getPublish = function() {
  return /** @type{?proto.clientchannel.Request.PublishAction} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Request.PublishAction, 2));
};


/**
 * @param {?proto.clientchannel.Request.PublishAction|undefined} value
 * @return {!proto.clientchannel.Request} returns this
*/
proto.clientchannel.Request.prototype.setPublish = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.clientchannel.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Request} returns this
 */
proto.clientchannel.Request.prototype.clearPublish = function() {
  return this.setPublish(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Request.prototype.hasPublish = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SubscribeAction subscribe = 3;
 * @return {?proto.clientchannel.Request.SubscribeAction}
 */
proto.clientchannel.Request.prototype.getSubscribe = function() {
  return /** @type{?proto.clientchannel.Request.SubscribeAction} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Request.SubscribeAction, 3));
};


/**
 * @param {?proto.clientchannel.Request.SubscribeAction|undefined} value
 * @return {!proto.clientchannel.Request} returns this
*/
proto.clientchannel.Request.prototype.setSubscribe = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.clientchannel.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Request} returns this
 */
proto.clientchannel.Request.prototype.clearSubscribe = function() {
  return this.setSubscribe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Request.prototype.hasSubscribe = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional InvalidateGdprAction invalidate_gdpr = 5;
 * @return {?proto.clientchannel.Request.InvalidateGdprAction}
 */
proto.clientchannel.Request.prototype.getInvalidateGdpr = function() {
  return /** @type{?proto.clientchannel.Request.InvalidateGdprAction} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Request.InvalidateGdprAction, 5));
};


/**
 * @param {?proto.clientchannel.Request.InvalidateGdprAction|undefined} value
 * @return {!proto.clientchannel.Request} returns this
*/
proto.clientchannel.Request.prototype.setInvalidateGdpr = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.clientchannel.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Request} returns this
 */
proto.clientchannel.Request.prototype.clearInvalidateGdpr = function() {
  return this.setInvalidateGdpr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Request.prototype.hasInvalidateGdpr = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SnapshotAction snapshot = 6;
 * @return {?proto.clientchannel.Request.SnapshotAction}
 */
proto.clientchannel.Request.prototype.getSnapshot = function() {
  return /** @type{?proto.clientchannel.Request.SnapshotAction} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Request.SnapshotAction, 6));
};


/**
 * @param {?proto.clientchannel.Request.SnapshotAction|undefined} value
 * @return {!proto.clientchannel.Request} returns this
*/
proto.clientchannel.Request.prototype.setSnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.clientchannel.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Request} returns this
 */
proto.clientchannel.Request.prototype.clearSnapshot = function() {
  return this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Request.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EventAck event_ack = 7;
 * @return {?proto.clientchannel.Request.EventAck}
 */
proto.clientchannel.Request.prototype.getEventAck = function() {
  return /** @type{?proto.clientchannel.Request.EventAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Request.EventAck, 7));
};


/**
 * @param {?proto.clientchannel.Request.EventAck|undefined} value
 * @return {!proto.clientchannel.Request} returns this
*/
proto.clientchannel.Request.prototype.setEventAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.clientchannel.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Request} returns this
 */
proto.clientchannel.Request.prototype.clearEventAck = function() {
  return this.setEventAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Request.prototype.hasEventAck = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EventNotAck event_not_ack = 8;
 * @return {?proto.clientchannel.Request.EventNotAck}
 */
proto.clientchannel.Request.prototype.getEventNotAck = function() {
  return /** @type{?proto.clientchannel.Request.EventNotAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Request.EventNotAck, 8));
};


/**
 * @param {?proto.clientchannel.Request.EventNotAck|undefined} value
 * @return {!proto.clientchannel.Request} returns this
*/
proto.clientchannel.Request.prototype.setEventNotAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.clientchannel.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Request} returns this
 */
proto.clientchannel.Request.prototype.clearEventNotAck = function() {
  return this.setEventNotAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Request.prototype.hasEventNotAck = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.clientchannel);
