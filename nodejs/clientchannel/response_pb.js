// source: clientchannel/response.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var clientchannel_event_pb = require('../clientchannel/event_pb.js');
goog.object.extend(proto, clientchannel_event_pb);
goog.exportSymbol('proto.clientchannel.Response', null, global);
goog.exportSymbol('proto.clientchannel.Response.DataCase', null, global);
goog.exportSymbol('proto.clientchannel.Response.InitAck', null, global);
goog.exportSymbol('proto.clientchannel.Response.InitNotAck', null, global);
goog.exportSymbol('proto.clientchannel.Response.InvalidateGdprAck', null, global);
goog.exportSymbol('proto.clientchannel.Response.InvalidateGdprNotAck', null, global);
goog.exportSymbol('proto.clientchannel.Response.PublishAck', null, global);
goog.exportSymbol('proto.clientchannel.Response.PublishNotAck', null, global);
goog.exportSymbol('proto.clientchannel.Response.SnapshotAck', null, global);
goog.exportSymbol('proto.clientchannel.Response.SnapshotNotAck', null, global);
goog.exportSymbol('proto.clientchannel.Response.SubscribeAck', null, global);
goog.exportSymbol('proto.clientchannel.Response.SubscribeNotAck', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.clientchannel.Response.oneofGroups_);
};
goog.inherits(proto.clientchannel.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.displayName = 'proto.clientchannel.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response.InitAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Response.InitAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.InitAck.displayName = 'proto.clientchannel.Response.InitAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response.InitNotAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Response.InitNotAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.InitNotAck.displayName = 'proto.clientchannel.Response.InitNotAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response.PublishAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Response.PublishAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.PublishAck.displayName = 'proto.clientchannel.Response.PublishAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response.PublishNotAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Response.PublishNotAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.PublishNotAck.displayName = 'proto.clientchannel.Response.PublishNotAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response.SubscribeAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Response.SubscribeAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.SubscribeAck.displayName = 'proto.clientchannel.Response.SubscribeAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response.SubscribeNotAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Response.SubscribeNotAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.SubscribeNotAck.displayName = 'proto.clientchannel.Response.SubscribeNotAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response.SnapshotAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Response.SnapshotAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.SnapshotAck.displayName = 'proto.clientchannel.Response.SnapshotAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response.SnapshotNotAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Response.SnapshotNotAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.SnapshotNotAck.displayName = 'proto.clientchannel.Response.SnapshotNotAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response.InvalidateGdprAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Response.InvalidateGdprAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.InvalidateGdprAck.displayName = 'proto.clientchannel.Response.InvalidateGdprAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientchannel.Response.InvalidateGdprNotAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientchannel.Response.InvalidateGdprNotAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientchannel.Response.InvalidateGdprNotAck.displayName = 'proto.clientchannel.Response.InvalidateGdprNotAck';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.clientchannel.Response.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.clientchannel.Response.DataCase = {
  DATA_NOT_SET: 0,
  EVENT: 1,
  INIT_ACK: 2,
  INIT_NOT_ACK: 3,
  PUBLISH_ACK: 4,
  PUBLISH_NOT_ACK: 5,
  SUBSCRIBE_ACK: 6,
  SUBSCRIBE_NOT_ACK: 7,
  SNAPSHOT_ACK: 8,
  SNAPSHOT_NOT_ACK: 9,
  INVALIDATE_GDPR_ACK: 10,
  INVALIDATE_GDPR_NOT_ACK: 11
};

/**
 * @return {proto.clientchannel.Response.DataCase}
 */
proto.clientchannel.Response.prototype.getDataCase = function() {
  return /** @type {proto.clientchannel.Response.DataCase} */(jspb.Message.computeOneofCase(this, proto.clientchannel.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && clientchannel_event_pb.PublishEventEnvelope.toObject(includeInstance, f),
    initAck: (f = msg.getInitAck()) && proto.clientchannel.Response.InitAck.toObject(includeInstance, f),
    initNotAck: (f = msg.getInitNotAck()) && proto.clientchannel.Response.InitNotAck.toObject(includeInstance, f),
    publishAck: (f = msg.getPublishAck()) && proto.clientchannel.Response.PublishAck.toObject(includeInstance, f),
    publishNotAck: (f = msg.getPublishNotAck()) && proto.clientchannel.Response.PublishNotAck.toObject(includeInstance, f),
    subscribeAck: (f = msg.getSubscribeAck()) && proto.clientchannel.Response.SubscribeAck.toObject(includeInstance, f),
    subscribeNotAck: (f = msg.getSubscribeNotAck()) && proto.clientchannel.Response.SubscribeNotAck.toObject(includeInstance, f),
    snapshotAck: (f = msg.getSnapshotAck()) && proto.clientchannel.Response.SnapshotAck.toObject(includeInstance, f),
    snapshotNotAck: (f = msg.getSnapshotNotAck()) && proto.clientchannel.Response.SnapshotNotAck.toObject(includeInstance, f),
    invalidateGdprAck: (f = msg.getInvalidateGdprAck()) && proto.clientchannel.Response.InvalidateGdprAck.toObject(includeInstance, f),
    invalidateGdprNotAck: (f = msg.getInvalidateGdprNotAck()) && proto.clientchannel.Response.InvalidateGdprNotAck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response}
 */
proto.clientchannel.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response;
  return proto.clientchannel.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response}
 */
proto.clientchannel.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new clientchannel_event_pb.PublishEventEnvelope;
      reader.readMessage(value,clientchannel_event_pb.PublishEventEnvelope.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = new proto.clientchannel.Response.InitAck;
      reader.readMessage(value,proto.clientchannel.Response.InitAck.deserializeBinaryFromReader);
      msg.setInitAck(value);
      break;
    case 3:
      var value = new proto.clientchannel.Response.InitNotAck;
      reader.readMessage(value,proto.clientchannel.Response.InitNotAck.deserializeBinaryFromReader);
      msg.setInitNotAck(value);
      break;
    case 4:
      var value = new proto.clientchannel.Response.PublishAck;
      reader.readMessage(value,proto.clientchannel.Response.PublishAck.deserializeBinaryFromReader);
      msg.setPublishAck(value);
      break;
    case 5:
      var value = new proto.clientchannel.Response.PublishNotAck;
      reader.readMessage(value,proto.clientchannel.Response.PublishNotAck.deserializeBinaryFromReader);
      msg.setPublishNotAck(value);
      break;
    case 6:
      var value = new proto.clientchannel.Response.SubscribeAck;
      reader.readMessage(value,proto.clientchannel.Response.SubscribeAck.deserializeBinaryFromReader);
      msg.setSubscribeAck(value);
      break;
    case 7:
      var value = new proto.clientchannel.Response.SubscribeNotAck;
      reader.readMessage(value,proto.clientchannel.Response.SubscribeNotAck.deserializeBinaryFromReader);
      msg.setSubscribeNotAck(value);
      break;
    case 8:
      var value = new proto.clientchannel.Response.SnapshotAck;
      reader.readMessage(value,proto.clientchannel.Response.SnapshotAck.deserializeBinaryFromReader);
      msg.setSnapshotAck(value);
      break;
    case 9:
      var value = new proto.clientchannel.Response.SnapshotNotAck;
      reader.readMessage(value,proto.clientchannel.Response.SnapshotNotAck.deserializeBinaryFromReader);
      msg.setSnapshotNotAck(value);
      break;
    case 10:
      var value = new proto.clientchannel.Response.InvalidateGdprAck;
      reader.readMessage(value,proto.clientchannel.Response.InvalidateGdprAck.deserializeBinaryFromReader);
      msg.setInvalidateGdprAck(value);
      break;
    case 11:
      var value = new proto.clientchannel.Response.InvalidateGdprNotAck;
      reader.readMessage(value,proto.clientchannel.Response.InvalidateGdprNotAck.deserializeBinaryFromReader);
      msg.setInvalidateGdprNotAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      clientchannel_event_pb.PublishEventEnvelope.serializeBinaryToWriter
    );
  }
  f = message.getInitAck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.clientchannel.Response.InitAck.serializeBinaryToWriter
    );
  }
  f = message.getInitNotAck();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.clientchannel.Response.InitNotAck.serializeBinaryToWriter
    );
  }
  f = message.getPublishAck();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.clientchannel.Response.PublishAck.serializeBinaryToWriter
    );
  }
  f = message.getPublishNotAck();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.clientchannel.Response.PublishNotAck.serializeBinaryToWriter
    );
  }
  f = message.getSubscribeAck();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.clientchannel.Response.SubscribeAck.serializeBinaryToWriter
    );
  }
  f = message.getSubscribeNotAck();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.clientchannel.Response.SubscribeNotAck.serializeBinaryToWriter
    );
  }
  f = message.getSnapshotAck();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.clientchannel.Response.SnapshotAck.serializeBinaryToWriter
    );
  }
  f = message.getSnapshotNotAck();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.clientchannel.Response.SnapshotNotAck.serializeBinaryToWriter
    );
  }
  f = message.getInvalidateGdprAck();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.clientchannel.Response.InvalidateGdprAck.serializeBinaryToWriter
    );
  }
  f = message.getInvalidateGdprNotAck();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.clientchannel.Response.InvalidateGdprNotAck.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.InitAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.InitAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response.InitAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.InitAck.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response.InitAck}
 */
proto.clientchannel.Response.InitAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response.InitAck;
  return proto.clientchannel.Response.InitAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response.InitAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response.InitAck}
 */
proto.clientchannel.Response.InitAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.InitAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.InitAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response.InitAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.InitAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.InitNotAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.InitNotAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response.InitNotAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.InitNotAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response.InitNotAck}
 */
proto.clientchannel.Response.InitNotAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response.InitNotAck;
  return proto.clientchannel.Response.InitNotAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response.InitNotAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response.InitNotAck}
 */
proto.clientchannel.Response.InitNotAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.InitNotAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.InitNotAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response.InitNotAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.InitNotAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.clientchannel.Response.InitNotAck.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.InitNotAck} returns this
 */
proto.clientchannel.Response.InitNotAck.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.PublishAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.PublishAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response.PublishAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.PublishAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishActionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response.PublishAck}
 */
proto.clientchannel.Response.PublishAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response.PublishAck;
  return proto.clientchannel.Response.PublishAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response.PublishAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response.PublishAck}
 */
proto.clientchannel.Response.PublishAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublishActionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.PublishAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.PublishAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response.PublishAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.PublishAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishActionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string publish_action_id = 1;
 * @return {string}
 */
proto.clientchannel.Response.PublishAck.prototype.getPublishActionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.PublishAck} returns this
 */
proto.clientchannel.Response.PublishAck.prototype.setPublishActionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.PublishNotAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.PublishNotAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response.PublishNotAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.PublishNotAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishActionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response.PublishNotAck}
 */
proto.clientchannel.Response.PublishNotAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response.PublishNotAck;
  return proto.clientchannel.Response.PublishNotAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response.PublishNotAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response.PublishNotAck}
 */
proto.clientchannel.Response.PublishNotAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublishActionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.PublishNotAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.PublishNotAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response.PublishNotAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.PublishNotAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishActionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string publish_action_id = 1;
 * @return {string}
 */
proto.clientchannel.Response.PublishNotAck.prototype.getPublishActionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.PublishNotAck} returns this
 */
proto.clientchannel.Response.PublishNotAck.prototype.setPublishActionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.clientchannel.Response.PublishNotAck.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.PublishNotAck} returns this
 */
proto.clientchannel.Response.PublishNotAck.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.SubscribeAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.SubscribeAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response.SubscribeAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.SubscribeAck.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response.SubscribeAck}
 */
proto.clientchannel.Response.SubscribeAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response.SubscribeAck;
  return proto.clientchannel.Response.SubscribeAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response.SubscribeAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response.SubscribeAck}
 */
proto.clientchannel.Response.SubscribeAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.SubscribeAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.SubscribeAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response.SubscribeAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.SubscribeAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.SubscribeNotAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.SubscribeNotAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response.SubscribeNotAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.SubscribeNotAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response.SubscribeNotAck}
 */
proto.clientchannel.Response.SubscribeNotAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response.SubscribeNotAck;
  return proto.clientchannel.Response.SubscribeNotAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response.SubscribeNotAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response.SubscribeNotAck}
 */
proto.clientchannel.Response.SubscribeNotAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.SubscribeNotAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.SubscribeNotAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response.SubscribeNotAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.SubscribeNotAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.clientchannel.Response.SubscribeNotAck.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.SubscribeNotAck} returns this
 */
proto.clientchannel.Response.SubscribeNotAck.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.SnapshotAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.SnapshotAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response.SnapshotAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.SnapshotAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
    snapshotId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fromTime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    toTime: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response.SnapshotAck}
 */
proto.clientchannel.Response.SnapshotAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response.SnapshotAck;
  return proto.clientchannel.Response.SnapshotAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response.SnapshotAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response.SnapshotAck}
 */
proto.clientchannel.Response.SnapshotAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSnapshotId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.SnapshotAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.SnapshotAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response.SnapshotAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.SnapshotAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSnapshotId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFromTime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToTime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.clientchannel.Response.SnapshotAck.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.SnapshotAck} returns this
 */
proto.clientchannel.Response.SnapshotAck.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string snapshot_id = 2;
 * @return {string}
 */
proto.clientchannel.Response.SnapshotAck.prototype.getSnapshotId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.SnapshotAck} returns this
 */
proto.clientchannel.Response.SnapshotAck.prototype.setSnapshotId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string from_time = 3;
 * @return {string}
 */
proto.clientchannel.Response.SnapshotAck.prototype.getFromTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.SnapshotAck} returns this
 */
proto.clientchannel.Response.SnapshotAck.prototype.setFromTime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string to_time = 4;
 * @return {string}
 */
proto.clientchannel.Response.SnapshotAck.prototype.getToTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.SnapshotAck} returns this
 */
proto.clientchannel.Response.SnapshotAck.prototype.setToTime = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.SnapshotNotAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.SnapshotNotAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response.SnapshotNotAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.SnapshotNotAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response.SnapshotNotAck}
 */
proto.clientchannel.Response.SnapshotNotAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response.SnapshotNotAck;
  return proto.clientchannel.Response.SnapshotNotAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response.SnapshotNotAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response.SnapshotNotAck}
 */
proto.clientchannel.Response.SnapshotNotAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.SnapshotNotAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.SnapshotNotAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response.SnapshotNotAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.SnapshotNotAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.clientchannel.Response.SnapshotNotAck.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.SnapshotNotAck} returns this
 */
proto.clientchannel.Response.SnapshotNotAck.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.clientchannel.Response.SnapshotNotAck.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.SnapshotNotAck} returns this
 */
proto.clientchannel.Response.SnapshotNotAck.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.InvalidateGdprAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.InvalidateGdprAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response.InvalidateGdprAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.InvalidateGdprAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    tenantId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gdprId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response.InvalidateGdprAck}
 */
proto.clientchannel.Response.InvalidateGdprAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response.InvalidateGdprAck;
  return proto.clientchannel.Response.InvalidateGdprAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response.InvalidateGdprAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response.InvalidateGdprAck}
 */
proto.clientchannel.Response.InvalidateGdprAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGdprId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.InvalidateGdprAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.InvalidateGdprAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response.InvalidateGdprAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.InvalidateGdprAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGdprId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string tenant_id = 1;
 * @return {string}
 */
proto.clientchannel.Response.InvalidateGdprAck.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.InvalidateGdprAck} returns this
 */
proto.clientchannel.Response.InvalidateGdprAck.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.clientchannel.Response.InvalidateGdprAck.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.InvalidateGdprAck} returns this
 */
proto.clientchannel.Response.InvalidateGdprAck.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string gdpr_id = 3;
 * @return {string}
 */
proto.clientchannel.Response.InvalidateGdprAck.prototype.getGdprId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.InvalidateGdprAck} returns this
 */
proto.clientchannel.Response.InvalidateGdprAck.prototype.setGdprId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientchannel.Response.InvalidateGdprNotAck.prototype.toObject = function(opt_includeInstance) {
  return proto.clientchannel.Response.InvalidateGdprNotAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientchannel.Response.InvalidateGdprNotAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.InvalidateGdprNotAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    tenantId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gdprId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientchannel.Response.InvalidateGdprNotAck}
 */
proto.clientchannel.Response.InvalidateGdprNotAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientchannel.Response.InvalidateGdprNotAck;
  return proto.clientchannel.Response.InvalidateGdprNotAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientchannel.Response.InvalidateGdprNotAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientchannel.Response.InvalidateGdprNotAck}
 */
proto.clientchannel.Response.InvalidateGdprNotAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGdprId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientchannel.Response.InvalidateGdprNotAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientchannel.Response.InvalidateGdprNotAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientchannel.Response.InvalidateGdprNotAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientchannel.Response.InvalidateGdprNotAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGdprId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string tenant_id = 1;
 * @return {string}
 */
proto.clientchannel.Response.InvalidateGdprNotAck.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.InvalidateGdprNotAck} returns this
 */
proto.clientchannel.Response.InvalidateGdprNotAck.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.clientchannel.Response.InvalidateGdprNotAck.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.InvalidateGdprNotAck} returns this
 */
proto.clientchannel.Response.InvalidateGdprNotAck.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string gdpr_id = 3;
 * @return {string}
 */
proto.clientchannel.Response.InvalidateGdprNotAck.prototype.getGdprId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.InvalidateGdprNotAck} returns this
 */
proto.clientchannel.Response.InvalidateGdprNotAck.prototype.setGdprId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string reason = 4;
 * @return {string}
 */
proto.clientchannel.Response.InvalidateGdprNotAck.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientchannel.Response.InvalidateGdprNotAck} returns this
 */
proto.clientchannel.Response.InvalidateGdprNotAck.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional PublishEventEnvelope event = 1;
 * @return {?proto.PublishEventEnvelope}
 */
proto.clientchannel.Response.prototype.getEvent = function() {
  return /** @type{?proto.PublishEventEnvelope} */ (
    jspb.Message.getWrapperField(this, clientchannel_event_pb.PublishEventEnvelope, 1));
};


/**
 * @param {?proto.PublishEventEnvelope|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InitAck init_ack = 2;
 * @return {?proto.clientchannel.Response.InitAck}
 */
proto.clientchannel.Response.prototype.getInitAck = function() {
  return /** @type{?proto.clientchannel.Response.InitAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Response.InitAck, 2));
};


/**
 * @param {?proto.clientchannel.Response.InitAck|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setInitAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearInitAck = function() {
  return this.setInitAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasInitAck = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InitNotAck init_not_ack = 3;
 * @return {?proto.clientchannel.Response.InitNotAck}
 */
proto.clientchannel.Response.prototype.getInitNotAck = function() {
  return /** @type{?proto.clientchannel.Response.InitNotAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Response.InitNotAck, 3));
};


/**
 * @param {?proto.clientchannel.Response.InitNotAck|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setInitNotAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearInitNotAck = function() {
  return this.setInitNotAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasInitNotAck = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PublishAck publish_ack = 4;
 * @return {?proto.clientchannel.Response.PublishAck}
 */
proto.clientchannel.Response.prototype.getPublishAck = function() {
  return /** @type{?proto.clientchannel.Response.PublishAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Response.PublishAck, 4));
};


/**
 * @param {?proto.clientchannel.Response.PublishAck|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setPublishAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearPublishAck = function() {
  return this.setPublishAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasPublishAck = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PublishNotAck publish_not_ack = 5;
 * @return {?proto.clientchannel.Response.PublishNotAck}
 */
proto.clientchannel.Response.prototype.getPublishNotAck = function() {
  return /** @type{?proto.clientchannel.Response.PublishNotAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Response.PublishNotAck, 5));
};


/**
 * @param {?proto.clientchannel.Response.PublishNotAck|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setPublishNotAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearPublishNotAck = function() {
  return this.setPublishNotAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasPublishNotAck = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SubscribeAck subscribe_ack = 6;
 * @return {?proto.clientchannel.Response.SubscribeAck}
 */
proto.clientchannel.Response.prototype.getSubscribeAck = function() {
  return /** @type{?proto.clientchannel.Response.SubscribeAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Response.SubscribeAck, 6));
};


/**
 * @param {?proto.clientchannel.Response.SubscribeAck|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setSubscribeAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearSubscribeAck = function() {
  return this.setSubscribeAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasSubscribeAck = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SubscribeNotAck subscribe_not_ack = 7;
 * @return {?proto.clientchannel.Response.SubscribeNotAck}
 */
proto.clientchannel.Response.prototype.getSubscribeNotAck = function() {
  return /** @type{?proto.clientchannel.Response.SubscribeNotAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Response.SubscribeNotAck, 7));
};


/**
 * @param {?proto.clientchannel.Response.SubscribeNotAck|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setSubscribeNotAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearSubscribeNotAck = function() {
  return this.setSubscribeNotAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasSubscribeNotAck = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SnapshotAck snapshot_ack = 8;
 * @return {?proto.clientchannel.Response.SnapshotAck}
 */
proto.clientchannel.Response.prototype.getSnapshotAck = function() {
  return /** @type{?proto.clientchannel.Response.SnapshotAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Response.SnapshotAck, 8));
};


/**
 * @param {?proto.clientchannel.Response.SnapshotAck|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setSnapshotAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearSnapshotAck = function() {
  return this.setSnapshotAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasSnapshotAck = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SnapshotNotAck snapshot_not_ack = 9;
 * @return {?proto.clientchannel.Response.SnapshotNotAck}
 */
proto.clientchannel.Response.prototype.getSnapshotNotAck = function() {
  return /** @type{?proto.clientchannel.Response.SnapshotNotAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Response.SnapshotNotAck, 9));
};


/**
 * @param {?proto.clientchannel.Response.SnapshotNotAck|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setSnapshotNotAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearSnapshotNotAck = function() {
  return this.setSnapshotNotAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasSnapshotNotAck = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional InvalidateGdprAck invalidate_gdpr_ack = 10;
 * @return {?proto.clientchannel.Response.InvalidateGdprAck}
 */
proto.clientchannel.Response.prototype.getInvalidateGdprAck = function() {
  return /** @type{?proto.clientchannel.Response.InvalidateGdprAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Response.InvalidateGdprAck, 10));
};


/**
 * @param {?proto.clientchannel.Response.InvalidateGdprAck|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setInvalidateGdprAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearInvalidateGdprAck = function() {
  return this.setInvalidateGdprAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasInvalidateGdprAck = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional InvalidateGdprNotAck invalidate_gdpr_not_ack = 11;
 * @return {?proto.clientchannel.Response.InvalidateGdprNotAck}
 */
proto.clientchannel.Response.prototype.getInvalidateGdprNotAck = function() {
  return /** @type{?proto.clientchannel.Response.InvalidateGdprNotAck} */ (
    jspb.Message.getWrapperField(this, proto.clientchannel.Response.InvalidateGdprNotAck, 11));
};


/**
 * @param {?proto.clientchannel.Response.InvalidateGdprNotAck|undefined} value
 * @return {!proto.clientchannel.Response} returns this
*/
proto.clientchannel.Response.prototype.setInvalidateGdprNotAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.clientchannel.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientchannel.Response} returns this
 */
proto.clientchannel.Response.prototype.clearInvalidateGdprNotAck = function() {
  return this.setInvalidateGdprNotAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientchannel.Response.prototype.hasInvalidateGdprNotAck = function() {
  return jspb.Message.getField(this, 11) != null;
};


goog.object.extend(exports, proto.clientchannel);
